# üîí SCRIPT DE PURGE GIT - SUPPRESSION DES SECRETS
# Ex√©cutez ce script en tant qu'administrateur

Write-Host "üö® PURGE DE L'HISTORIQUE GIT - SUPPRESSION DES SECRETS" -ForegroundColor Red
Write-Host "==================================================" -ForegroundColor Red

# V√©rification que nous sommes dans le bon r√©pertoire
if (-not (Test-Path ".git")) {
    Write-Host "‚ùå ERREUR: Ce script doit √™tre ex√©cut√© dans un r√©pertoire Git" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ R√©pertoire Git d√©tect√©" -ForegroundColor Green

# 1. Sauvegarde de l'√©tat actuel
Write-Host "üì¶ Cr√©ation d'une sauvegarde..." -ForegroundColor Yellow
$backupDir = "backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
Copy-Item -Path "." -Destination "../$backupDir" -Recurse -Force
Write-Host "‚úÖ Sauvegarde cr√©√©e: ../$backupDir" -ForegroundColor Green

# 2. Suppression des fichiers .env du working directory
Write-Host "üóëÔ∏è Suppression des fichiers .env locaux..." -ForegroundColor Yellow
Get-ChildItem -Path "." -Name "*.env*" | ForEach-Object {
    Remove-Item $_ -Force
    Write-Host "   Supprim√©: $_" -ForegroundColor Yellow
}

# 3. Suppression des fichiers .env de l'index Git
Write-Host "üóëÔ∏è Suppression des fichiers .env de l'index Git..." -ForegroundColor Yellow
git rm --cached --ignore-unmatch "*.env*" 2>$null
git rm --cached --ignore-unmatch ".env" 2>$null
git rm --cached --ignore-unmatch ".env.local" 2>$null
git rm --cached --ignore-unmatch ".env.development" 2>$null
git rm --cached --ignore-unmatch ".env.production" 2>$null

# 4. Nettoyage de l'historique avec filter-branch
Write-Host "üßπ Nettoyage de l'historique Git..." -ForegroundColor Yellow
Write-Host "   ‚ö†Ô∏è Cette op√©ration peut prendre du temps..." -ForegroundColor Yellow

# Suppression des fichiers .env de tout l'historique
git filter-branch --force --index-filter `
    "git rm --cached --ignore-unmatch *.env* .env .env.local .env.development .env.production" `
    --prune-empty --tag-name-filter cat -- --all

# 5. Nettoyage des r√©f√©rences
Write-Host "üßπ Nettoyage des r√©f√©rences..." -ForegroundColor Yellow
git for-each-ref --format="%(refname)" refs/original | ForEach-Object {
    git update-ref -d $_
}

# 6. Nettoyage du garbage collector
Write-Host "üóëÔ∏è Nettoyage du garbage collector..." -ForegroundColor Yellow
git reflog expire --expire=now --all
git gc --prune=now --aggressive

# 7. Commit des changements
Write-Host "üíæ Commit des changements..." -ForegroundColor Yellow
git add .
git commit -m "üîí SECURITY: Purge complete des secrets de l'historique Git" --allow-empty

Write-Host ""
Write-Host "‚úÖ PURGE TERMIN√âE AVEC SUCC√àS!" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã PROCHAINES √âTAPES:" -ForegroundColor Cyan
Write-Host "1. V√©rifiez que les secrets ont √©t√© supprim√©s" -ForegroundColor White
Write-Host "2. Testez l'application localement" -ForegroundColor White
Write-Host "3. Poussez les changements: git push --force" -ForegroundColor White
Write-Host "4. Rotatez les cl√©s Supabase" -ForegroundColor White
Write-Host ""
Write-Host "‚ö†Ô∏è ATTENTION: Utilisez 'git push --force' avec pr√©caution!" -ForegroundColor Red
Write-Host ""
