// Service pour la cr√©ation de tokens de v√©rification
import { supabase } from '@/integrations/supabase/client';

export interface TokenCreationResult {
  success: boolean;
  token?: string;
  error?: string;
}

export class TokenCreationService {
  /**
   * Cr√©e un token de v√©rification pour une propri√©t√©
   */
  static async createVerificationToken(propertyId: string): Promise<TokenCreationResult> {
    try {
      console.log('üîç Cr√©ation d\'un token de v√©rification pour la propri√©t√©:', propertyId);
      
      // G√©n√©rer un token unique
      const token = `${propertyId}-${Date.now()}-${Math.random().toString(36).substring(2)}`;
      
      // V√©rifier si un token existe d√©j√† pour cette propri√©t√©
      const { data: existingToken, error: checkError } = await supabase
        .from('property_verification_tokens')
        .select('id, token')
        .eq('property_id', propertyId)
        .eq('is_active', true)
        .single();
      
      if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = no rows found
        console.error('‚ùå Erreur lors de la v√©rification du token existant:', checkError);
        return {
          success: false,
          error: 'Erreur lors de la v√©rification du token existant'
        };
      }
      
      if (existingToken) {
        console.log('‚úÖ Token existant trouv√©:', existingToken.token);
        return {
          success: true,
          token: existingToken.token
        };
      }
      
      // Cr√©er un nouveau token
      const { data: newToken, error: createError } = await supabase
        .from('property_verification_tokens')
        .insert({
          property_id: propertyId,
          token: token,
          is_active: true
        })
        .select()
        .single();
      
      if (createError) {
        console.error('‚ùå Erreur lors de la cr√©ation du token:', createError);
        return {
          success: false,
          error: 'Erreur lors de la cr√©ation du token'
        };
      }
      
      console.log('‚úÖ Token cr√©√© avec succ√®s:', newToken.token);
      return {
        success: true,
        token: newToken.token
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du token:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }
  
  /**
   * Cr√©e un token pour la propri√©t√© sp√©cifique qui pose probl√®me
   */
  static async createTokenForProblemProperty(): Promise<TokenCreationResult> {
    const propertyId = 'e3134554-7233-42b4-90b4-424d5aa74f40';
    const existingToken = '2ca50aa4-0754-409a-93d5-6e1dc7287b13-0b711e3e-c976-44f4-89eb-6fb23075b3b9';
    
    try {
      console.log('üîç Cr√©ation du token pour la propri√©t√© probl√©matique...');
      
      // Cr√©er le token sp√©cifique
      const { data: newToken, error: createError } = await supabase
        .from('property_verification_tokens')
        .insert({
          property_id: propertyId,
          token: existingToken,
          is_active: true
        })
        .select()
        .single();
      
      if (createError) {
        console.error('‚ùå Erreur lors de la cr√©ation du token:', createError);
        return {
          success: false,
          error: 'Erreur lors de la cr√©ation du token'
        };
      }
      
      console.log('‚úÖ Token cr√©√© avec succ√®s pour la propri√©t√© probl√©matique');
      return {
        success: true,
        token: newToken.token
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du token:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }
}
