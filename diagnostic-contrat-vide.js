/**
 * DIAGNOSTIC D√âTAILL√â - Contrat Vide
 * Analyse compl√®te pour identifier pourquoi le contrat PDF est vide
 */

console.log('üîç DIAGNOSTIC D√âTAILL√â - CONTRAT VIDE');
console.log('====================================');

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const filePath = path.join(__dirname, 'supabase', 'functions', 'generate-contract', 'index.ts');

try {
  const fileContent = fs.readFileSync(filePath, 'utf8');
  
  console.log('\nüß™ ANALYSE 1: Structure du template de contrat');
  console.log('===============================================');
  
  // V√©rifier si le template de contrat est pr√©sent
  const contractTemplateRegex = /const contractContent = `[\s\S]*?`;/;
  const contractTemplateMatch = fileContent.match(contractTemplateRegex);
  
  if (contractTemplateMatch) {
    console.log('‚úÖ Template de contrat trouv√©');
    const templateContent = contractTemplateMatch[0];
    console.log(`üìä Longueur du template: ${templateContent.length} caract√®res`);
    
    // V√©rifier les √©l√©ments cl√©s du template
    const keyElements = [
      'üìë Contrat de location saisonni√®re',
      'Entre les soussign√©s :',
      'Le Bailleur (Propri√©taire/Host)',
      'Le Locataire (Voyageur/Guest)',
      '1. Objet du contrat',
      '2. D√©signation du bien',
      '3. Dur√©e de la location',
      '10. Loi applicable et juridiction'
    ];
    
    let missingElements = [];
    for (const element of keyElements) {
      if (templateContent.includes(element)) {
        console.log(`‚úÖ √âl√©ment trouv√©: ${element}`);
      } else {
        console.log(`‚ùå √âl√©ment manquant: ${element}`);
        missingElements.push(element);
      }
    }
    
    if (missingElements.length > 0) {
      console.log(`‚ö†Ô∏è ${missingElements.length} √©l√©ments manquants dans le template`);
    } else {
      console.log('‚úÖ Tous les √©l√©ments cl√©s du template sont pr√©sents');
    }
  } else {
    console.log('‚ùå PROBL√àME MAJEUR: Template de contrat non trouv√©!');
  }
  
  console.log('\nüß™ ANALYSE 2: Variables dynamiques dans le template');
  console.log('==================================================');
  
  // V√©rifier les variables dynamiques
  const dynamicVariables = [
    '${property.contact_info?.name',
    '${property.address',
    '${guest.full_name',
    '${guest.nationality',
    '${guest.document_number',
    '${property.property_type',
    '${booking.check_in_date',
    '${booking.check_out_date',
    '${property.city'
  ];
  
  let missingVariables = [];
  for (const variable of dynamicVariables) {
    if (fileContent.includes(variable)) {
      console.log(`‚úÖ Variable trouv√©e: ${variable}`);
    } else {
      console.log(`‚ùå Variable manquante: ${variable}`);
      missingVariables.push(variable);
    }
  }
  
  if (missingVariables.length > 0) {
    console.log(`‚ö†Ô∏è ${missingVariables.length} variables dynamiques manquantes`);
  } else {
    console.log('‚úÖ Toutes les variables dynamiques sont pr√©sentes');
  }
  
  console.log('\nüß™ ANALYSE 3: Fonction createSimplePDF');
  console.log('=====================================');
  
  // V√©rifier la fonction createSimplePDF
  const createPdfRegex = /function createSimplePDF\(content: string\): string \{[\s\S]*?\n\}/;
  const createPdfMatch = fileContent.match(createPdfRegex);
  
  if (createPdfMatch) {
    console.log('‚úÖ Fonction createSimplePDF trouv√©e');
    const pdfFunction = createPdfMatch[0];
    
    // V√©rifier les √©l√©ments critiques de la fonction PDF
    const pdfElements = [
      'const lines = content.split',
      'let yPosition = 750',
      'const lineHeight = 14',
      'let pdfInstructions = \'BT\\n/F1 10 Tf\\n\'',
      'for (let i = 0; i < lines.length; i++)',
      'const currentY = yPosition - (i * lineHeight)',
      'pdfInstructions += `50 ${currentY} Td\\n(${line}) Tj\\n`',
      'pdfInstructions += \'ET\'',
      '%PDF-1.4'
    ];
    
    let missingPdfElements = [];
    for (const element of pdfElements) {
      if (pdfFunction.includes(element)) {
        console.log(`‚úÖ √âl√©ment PDF trouv√©: ${element}`);
      } else {
        console.log(`‚ùå √âl√©ment PDF manquant: ${element}`);
        missingPdfElements.push(element);
      }
    }
    
    if (missingPdfElements.length > 0) {
      console.log(`‚ö†Ô∏è ${missingPdfElements.length} √©l√©ments PDF critiques manquants`);
    } else {
      console.log('‚úÖ Tous les √©l√©ments PDF critiques sont pr√©sents');
    }
  } else {
    console.log('‚ùå PROBL√àME MAJEUR: Fonction createSimplePDF non trouv√©e!');
  }
  
  console.log('\nüß™ ANALYSE 4: Gestion de l\'encodage');
  console.log('===================================');
  
  // V√©rifier l'encodage base64
  if (fileContent.includes('btoa(unescape(encodeURIComponent(pdfContent)))')) {
    console.log('‚úÖ Encodage UTF-8 correct trouv√©');
  } else if (fileContent.includes('btoa(pdfContent)')) {
    console.log('‚ö†Ô∏è Encodage simple trouv√© (peut causer des probl√®mes avec les accents)');
  } else {
    console.log('‚ùå PROBL√àME: Aucun encodage base64 trouv√©!');
  }
  
  console.log('\nüß™ ANALYSE 5: Erreurs potentielles dans le code');
  console.log('===============================================');
  
  // Rechercher des erreurs de syntaxe potentielles
  const potentialErrors = [
    { pattern: /`;[\s\n]*;/, description: 'Double point-virgule d√©tect√©' },
    { pattern: /\$\{[^}]*\$\{/, description: 'Variables imbriqu√©es d√©tect√©es' },
    { pattern: /`[^`]*\n[^`]*`;/, description: 'Template literal mal ferm√©' },
    { pattern: /\.trim\(\)\s*;[\s\n]*const/, description: 'Point-virgule apr√®s trim()' }
  ];
  
  let errorsFound = [];
  for (const error of potentialErrors) {
    const matches = fileContent.match(error.pattern);
    if (matches) {
      console.log(`‚ùå ERREUR D√âTECT√âE: ${error.description}`);
      console.log(`   Match: "${matches[0].replace(/\n/g, '\\n')}"`);
      errorsFound.push(error.description);
    } else {
      console.log(`‚úÖ Pas d'erreur: ${error.description}`);
    }
  }
  
  console.log('\nüß™ ANALYSE 6: Test de g√©n√©ration de contenu');
  console.log('==========================================');
  
  // Simuler la g√©n√©ration de contenu
  const mockBooking = {
    check_in_date: '2025-09-24',
    check_out_date: '2025-09-26',
    property: {
      contact_info: { name: 'Propri√©taire Test' },
      address: 'Adresse Test, Casablanca, Maroc',
      property_type: 'apartment',
      city: 'Casablanca'
    },
    guests: [{
      full_name: 'Test Guest',
      nationality: 'FRAN√áAIS',
      document_number: 'TEST123'
    }]
  };
  
  // Simuler le template
  const testTemplate = `üìë Contrat de location saisonni√®re (courte dur√©e)

Entre les soussign√©s :

Le Bailleur (Propri√©taire/Host)
Nom et pr√©nom : ${mockBooking.property.contact_info?.name || 'Non sp√©cifi√©'}
Adresse : ${mockBooking.property.address || 'Non sp√©cifi√©e'}

Et

Le Locataire (Voyageur/Guest)
Nom et pr√©nom : ${mockBooking.guests[0]?.full_name || 'Non sp√©cifi√©'}
Nationalit√© : ${mockBooking.guests[0]?.nationality || 'Non sp√©cifi√©e'}
N¬∞ de pi√®ce d'identit√© (CIN ou passeport) : ${mockBooking.guests[0]?.document_number || 'Non sp√©cifi√©'}

1. Objet du contrat

Le pr√©sent contrat a pour objet la location saisonni√®re, meubl√©e et √©quip√©e, du bien ci-apr√®s d√©sign√©, √† usage exclusif d'habitation.

Fait √† ${mockBooking.property.city || 'Casablanca'}, le ${new Date().toLocaleDateString('fr-FR')}`;
  
  console.log('üìù Test de g√©n√©ration de contenu:');
  console.log(`‚úÖ Longueur du contenu g√©n√©r√©: ${testTemplate.length} caract√®res`);
  console.log('üìÑ Aper√ßu du contenu:');
  console.log(testTemplate.substring(0, 200) + '...');
  
  // Test de division en lignes
  const lines = testTemplate.split('\n');
  console.log(`‚úÖ Nombre de lignes: ${lines.length}`);
  console.log(`‚úÖ Premi√®re ligne: "${lines[0]}"`);
  console.log(`‚úÖ Derni√®re ligne: "${lines[lines.length - 1]}"`);
  
  console.log('\nüìä R√âSUM√â DU DIAGNOSTIC');
  console.log('=======================');
  
  const totalIssues = missingElements.length + missingVariables.length + errorsFound.length;
  
  if (totalIssues === 0) {
    console.log('‚úÖ AUCUN PROBL√àME D√âTECT√â dans le code');
    console.log('üîç Le probl√®me pourrait venir de:');
    console.log('   1. Les donn√©es de booking sont vides ou incorrectes');
    console.log('   2. La fonction n\'est pas appel√©e correctement');
    console.log('   3. Un probl√®me dans la g√©n√©ration PDF elle-m√™me');
    console.log('   4. Un probl√®me d\'encodage ou de transmission');
  } else {
    console.log(`‚ùå ${totalIssues} PROBL√àMES D√âTECT√âS:`);
    if (missingElements.length > 0) {
      console.log(`   - ${missingElements.length} √©l√©ments manquants dans le template`);
    }
    if (missingVariables.length > 0) {
      console.log(`   - ${missingVariables.length} variables dynamiques manquantes`);
    }
    if (errorsFound.length > 0) {
      console.log(`   - ${errorsFound.length} erreurs de syntaxe d√©tect√©es`);
    }
  }
  
  console.log('\nüöÄ ACTIONS RECOMMAND√âES:');
  console.log('1. V√©rifier les logs de la fonction Edge pour voir les donn√©es re√ßues');
  console.log('2. Ajouter des logs de debug dans generateContractPDF');
  console.log('3. Tester avec des donn√©es de booking simples');
  console.log('4. V√©rifier que la fonction createSimplePDF re√ßoit bien le contenu');
  
  console.log('\nüìã COMMANDE DE TEST RECOMMAND√âE:');
  console.log('curl -X POST \'https://csopyblkfyofwkeqqegd.supabase.co/functions/v1/generate-contract\' \\');
  console.log('  -H \'Authorization: Bearer YOUR_ANON_KEY\' \\');
  console.log('  -H \'Content-Type: application/json\' \\');
  console.log('  -d \'{"bookingId": "cdd5a70f-38c4-4bf3-82a5-58c58a41000b", "action": "generate"}\'');
  
} catch (error) {
  console.error('‚ùå Erreur lors du diagnostic:', error.message);
}
