name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Tests de qualit√© de code
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint
      
    - name: Type check
      run: npm run typecheck
      
    - name: Security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Tests de build
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Tests des outils MCP et Edge Functions
  tools-test:
    name: Tools & Edge Functions Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test environment check tool
      run: npm run check:env || true
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      
    - name: Test Edge Functions discovery
      run: npm run sync:edges -- --list
      
    # Optionnel: Tests unitaires (√† impl√©menter)
    # - name: Run unit tests
    #   run: npm test

  # D√©ploiement des Edge Functions (si branche main)
  deploy-functions:
    name: Deploy Edge Functions
    runs-on: ubuntu-latest
    needs: [build-test, tools-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Deploy Edge Functions
      run: |
        supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        
    - name: Notify deployment
      run: |
        echo "‚úÖ Edge Functions deployed successfully"
        echo "Project: ${{ secrets.SUPABASE_PROJECT_REF }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"

  # Notification de succ√®s
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [build-test, tools-test]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "üéâ CI/CD Pipeline completed successfully!"
        echo "‚úÖ Code quality: PASSED"
        echo "‚úÖ Build test: PASSED" 
        echo "‚úÖ Tools test: PASSED"
        
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "üöÄ Ready for production deployment"
        fi

  # Notification d'√©chec
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [build-test, tools-test]
    if: failure()
    
    steps:
    - name: Failure notification
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Please check the logs and fix the issues."
        exit 1