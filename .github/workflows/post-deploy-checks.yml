name: Post-Deploy Health Checks

on:
  # Déclenché après un déploiement Vercel
  deployment_status:
  
  # Déclenché manuellement
  workflow_dispatch:
    inputs:
      app_url:
        description: 'URL de l\'application à tester'
        required: false
        default: 'https://morocco-host-helper.vercel.app'
      skip_edge_tests:
        description: 'Ignorer les tests Edge Functions'
        required: false
        type: boolean
        default: false

env:
  APP_URL: ${{ github.event.deployment_status.target_url || inputs.app_url || 'https://morocco-host-helper.vercel.app' }}

jobs:
  health-checks:
    name: Health Checks
    runs-on: ubuntu-latest
    # Seulement si le déploiement a réussi
    if: github.event.deployment_status.state == 'success' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for deployment to be ready
      run: |
        echo "⏳ Waiting for $APP_URL to be ready..."
        for i in {1..30}; do
          if curl -f -s "$APP_URL" > /dev/null; then
            echo "✅ Application is ready!"
            break
          fi
          echo "Attempt $i/30 - waiting 10s..."
          sleep 10
        done
        
    - name: Test application health
      run: |
        echo "🔍 Testing application health at $APP_URL"
        
        # Test de base - page d'accueil
        response=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL")
        if [ "$response" != "200" ]; then
          echo "❌ Homepage failed with status $response"
          exit 1
        fi
        echo "✅ Homepage: OK ($response)"
        
        # Test des assets statiques
        response=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/assets/")
        if [ "$response" == "200" ] || [ "$response" == "403" ]; then
          echo "✅ Static assets: OK ($response)"
        else
          echo "⚠️ Static assets: $response (might be normal)"
        fi
        
    - name: Test Edge Functions
      if: ${{ !inputs.skip_edge_tests }}
      run: |
        echo "🔍 Testing Edge Functions..."
        npm run sync:edges -- --prod-only
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        
    - name: Test auth endpoints
      run: |
        echo "🔍 Testing authentication endpoints..."
        
        # Test Supabase Auth (OPTIONS request)
        auth_url="${{ secrets.VITE_SUPABASE_URL }}/auth/v1/token"
        response=$(curl -s -o /dev/null -w "%{http_code}" -X OPTIONS "$auth_url")
        if [ "$response" == "200" ] || [ "$response" == "204" ]; then
          echo "✅ Supabase Auth: OK ($response)"
        else
          echo "❌ Supabase Auth: Failed ($response)"
          exit 1
        fi
        
    - name: Performance test
      run: |
        echo "🚀 Testing performance..."
        
        # Mesurer le temps de réponse
        start_time=$(date +%s%3N)
        curl -s "$APP_URL" > /dev/null
        end_time=$(date +%s%3N)
        
        response_time=$((end_time - start_time))
        echo "⚡ Response time: ${response_time}ms"
        
        if [ "$response_time" -gt 5000 ]; then
          echo "⚠️ Slow response time (>5s)"
        elif [ "$response_time" -gt 3000 ]; then
          echo "⚠️ Moderate response time (>3s)"
        else
          echo "✅ Good response time (<3s)"
        fi
        
    - name: Test critical user flows (smoke tests)
      run: |
        echo "🧪 Running smoke tests..."
        
        # Test 1: Page d'accueil accessible
        if ! curl -f -s "$APP_URL" | grep -q "Morocco Host Helper"; then
          echo "❌ Homepage content test failed"
          exit 1
        fi
        echo "✅ Homepage content: OK"
        
        # Test 2: Auth page accessible
        auth_page_response=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/auth")
        if [ "$auth_page_response" == "200" ]; then
          echo "✅ Auth page: OK"
        else
          echo "⚠️ Auth page: $auth_page_response"
        fi
        
        # Test 3: Dashboard redirect (should redirect to auth if not logged in)
        dashboard_response=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/dashboard")
        if [ "$dashboard_response" == "200" ] || [ "$dashboard_response" == "302" ] || [ "$dashboard_response" == "401" ]; then
          echo "✅ Dashboard route: OK ($dashboard_response)"
        else
          echo "❌ Dashboard route: Failed ($dashboard_response)"
          exit 1
        fi

  # Notification des résultats
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: health-checks
    if: always()
    
    steps:
    - name: Health check results
      run: |
        if [ "${{ needs.health-checks.result }}" == "success" ]; then
          echo "🎉 Post-deploy health checks PASSED!"
          echo "✅ Application: $APP_URL"
          echo "✅ All critical endpoints are working"
          echo "✅ Performance is acceptable"
          echo "✅ Smoke tests passed"
        else
          echo "❌ Post-deploy health checks FAILED!"
          echo "🔗 Application: $APP_URL"
          echo "Please check the logs and investigate the issues."
          echo "Consider rolling back if critical functionality is broken."
          exit 1
        fi
        
  # Job conditionnel pour les rollbacks automatiques
  auto-rollback:
    name: Auto Rollback (if enabled)
    runs-on: ubuntu-latest
    needs: health-checks
    if: failure() && github.event.deployment_status.state == 'success'
    # Ce job ne s'exécute que si explicitement activé via un secret
    # ENABLE_AUTO_ROLLBACK: 'true'
    
    steps:
    - name: Consider rollback
      run: |
        echo "⚠️ Health checks failed after deployment"
        echo "🔗 Failed deployment: ${{ github.event.deployment_status.target_url }}"
        echo "📝 Consider manual rollback via Vercel dashboard"
        echo "📝 Or investigate and fix the issues"
        
        # Optionnel: Rollback automatique via Vercel API
        # if [ "${{ secrets.ENABLE_AUTO_ROLLBACK }}" == "true" ]; then
        #   echo "🔄 Initiating automatic rollback..."
        #   # Utiliser l'API Vercel pour rollback
        # fi
