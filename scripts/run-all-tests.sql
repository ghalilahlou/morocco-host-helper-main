-- ==========================================
-- EX√âCUTION DE TOUS LES TESTS DE COH√âRENCE
-- Morocco Host Helper Platform
-- Version: Diagnostic Complet
-- ==========================================

-- Mode d'emploi:
-- 1. Ouvrez votre client SQL (Supabase Dashboard, pgAdmin, psql, etc.)
-- 2. Connectez-vous √† votre base de donn√©es Morocco Host Helper
-- 3. Ex√©cutez ce script complet
-- 4. Analysez les r√©sultats pour identifier les incoh√©rences

SELECT 'üöÄ D√âBUT DES TESTS DE COH√âRENCE COMPLETS' as status;
SELECT '==========================================';
SELECT 'Morocco Host Helper Platform - Diagnostic Complet';
SELECT 'Timestamp: ' || NOW()::text;
SELECT '==========================================';

-- ===========================================
-- üîç TEST 1: DIAGNOSTIC RAPIDE
-- ===========================================

SELECT '';
SELECT 'üîç TEST 1: DIAGNOSTIC RAPIDE' as test_phase;
SELECT '==========================================';

-- Tests critiques (MUST HAVE)
SELECT 'üö® TESTS CRITIQUES' as section;

SELECT 
  '1. Vue profiles' as test,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles') 
    THEN '‚úÖ OK'
    ELSE '‚ùå MANQUANTE - AdminContext va √âCHOUER'
  END as status;

SELECT 
  '2. Fonction get_users_for_admin' as test,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_users_for_admin') 
    THEN '‚úÖ OK'
    ELSE '‚ùå MANQUANTE - AdminContext va √âCHOUER'
  END as status;

SELECT 
  '3. Colonne bookings.total_amount' as test,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'bookings' AND column_name = 'total_amount') 
    THEN '‚úÖ OK'
    ELSE '‚ùå MANQUANTE - Calcul revenue va √âCHOUER'
  END as status;

-- Tests importants (SHOULD HAVE)
SELECT '‚ö†Ô∏è TESTS IMPORTANTS' as section;

SELECT 
  '4. Utilisateurs dans auth.users' as test,
  CASE 
    WHEN (SELECT count(*) FROM auth.users) > 0 
    THEN '‚úÖ OK - ' || (SELECT count(*) FROM auth.users) || ' utilisateurs'
    ELSE '‚ùå VIDE - Interface sera vide'
  END as status;

SELECT 
  '5. Propri√©t√©s dans properties' as test,
  CASE 
    WHEN (SELECT count(*) FROM properties) > 0 
    THEN '‚úÖ OK - ' || (SELECT count(*) FROM properties) || ' propri√©t√©s'
    ELSE '‚ùå VIDE - Interface sera vide'
  END as status;

SELECT 
  '6. Propri√©t√©s avec propri√©taires' as test,
  CASE 
    WHEN (SELECT count(*) FROM properties WHERE user_id IS NOT NULL) > 0 
    THEN '‚úÖ OK - ' || (SELECT count(*) FROM properties WHERE user_id IS NOT NULL) || ' propri√©t√©s assign√©es'
    ELSE '‚ùå AUCUNE - AdminUsers sera dysfonctionnel'
  END as status;

-- Diagnostic final rapide
WITH diagnostic AS (
  SELECT 
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_users_for_admin') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'bookings' AND column_name = 'total_amount') THEN 1 ELSE 0 END as critiques_ok,
    CASE WHEN (SELECT count(*) FROM auth.users) > 0 THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(*) FROM properties) > 0 THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(*) FROM properties WHERE user_id IS NOT NULL) > 0 THEN 1 ELSE 0 END as importants_ok
)
SELECT 
  'üèÅ DIAGNOSTIC RAPIDE' as phase_summary,
  critiques_ok || '/3 critiques OK' as score_critique,
  importants_ok || '/3 importants OK' as score_important,
  CASE 
    WHEN critiques_ok = 3 AND importants_ok >= 2 
    THEN '‚úÖ SYST√àME OP√âRATIONNEL'
    WHEN critiques_ok = 3 AND importants_ok >= 1
    THEN '‚ö†Ô∏è SYST√àME FONCTIONNEL (donn√©es limit√©es)'
    WHEN critiques_ok >= 2
    THEN '‚ùå CORRECTIONS REQUISES'
    ELSE 'üö® CORRECTIONS CRITIQUES REQUISES'
  END as status_global
FROM diagnostic;

-- ===========================================
-- üìä TEST 2: STRUCTURE DATABASE
-- ===========================================

SELECT '';
SELECT 'üìä TEST 2: STRUCTURE DATABASE' as test_phase;
SELECT '==========================================';

-- Tables principales
SELECT 
  'Tables principales' as check_type,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'properties') 
    THEN '‚úÖ properties' 
    ELSE '‚ùå properties manquante' 
  END as properties_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'bookings') 
    THEN '‚úÖ bookings' 
    ELSE '‚ùå bookings manquante' 
  END as bookings_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'admin_users') 
    THEN '‚úÖ admin_users' 
    ELSE '‚ùå admin_users manquante' 
  END as admin_users_status;

-- Statistiques g√©n√©rales
SELECT 
  'Donn√©es g√©n√©rales' as stats_type,
  (SELECT count(*) FROM auth.users) as total_users,
  (SELECT count(*) FROM properties) as total_properties,
  (SELECT count(*) FROM bookings) as total_bookings,
  (SELECT count(*) FROM admin_users) as total_admins;

-- ===========================================
-- üîß TEST 3: FONCTIONS SQL
-- ===========================================

SELECT '';
SELECT 'üîß TEST 3: FONCTIONS SQL' as test_phase;
SELECT '==========================================';

-- Test fonctions critiques
SELECT 
  'Test get_users_for_admin' as function_test,
  CASE 
    WHEN public.get_users_for_admin() IS NOT NULL 
    THEN '‚úÖ OK - ' || json_array_length(public.get_users_for_admin()) || ' utilisateurs retourn√©s'
    ELSE '‚ùå √âCHOUE'
  END as result;

-- V√©rification alternatives Edge Functions
SELECT 
  'Alternative get_all_users_for_admin' as function_test,
  CASE 
    WHEN public.get_all_users_for_admin()->>'users' IS NOT NULL
    THEN '‚úÖ OK - Alternative Edge Function disponible'
    ELSE '‚ùå √âCHOUE'
  END as result;

-- ===========================================
-- üé® TEST 4: SIMULATION INTERFACE ADMIN
-- ===========================================

SELECT '';
SELECT 'üé® TEST 4: SIMULATION INTERFACE ADMIN' as test_phase;
SELECT '==========================================';

-- Donn√©es pour dashboard
WITH dashboard_stats AS (
  SELECT 
    (SELECT count(*) FROM auth.users) as total_users,
    (SELECT count(*) FROM properties) as total_properties,
    (SELECT count(*) FROM bookings) as total_bookings,
    (SELECT COALESCE(sum(total_amount), 0) FROM bookings) as total_revenue
)
SELECT 
  'Dashboard Statistics' as interface_element,
  'Users: ' || total_users as users_display,
  'Properties: ' || total_properties as properties_display,
  'Bookings: ' || total_bookings as bookings_display,
  'Revenue: ' || total_revenue || '‚Ç¨' as revenue_display,
  CASE 
    WHEN total_users > 0 AND total_properties > 0 AND total_bookings > 0
    THEN '‚úÖ Interface aura des donn√©es significatives'
    ELSE '‚ö†Ô∏è Interface avec donn√©es limit√©es'
  END as interface_readiness
FROM dashboard_stats;

-- Top propri√©taires pour AdminUsers
SELECT 
  'Top Propri√©taires' as interface_element,
  u.email,
  count(p.id) as properties_count,
  count(b.id) as bookings_count,
  CASE 
    WHEN count(p.id) >= 2 THEN '‚≠ê Host actif' 
    WHEN count(p.id) = 1 THEN 'üè† Nouveau host'
    ELSE 'üë§ Simple utilisateur'
  END as user_type
FROM auth.users u
LEFT JOIN properties p ON p.user_id = u.id
LEFT JOIN bookings b ON b.property_id = p.id
GROUP BY u.id, u.email
ORDER BY count(p.id) DESC
LIMIT 3;

-- ===========================================
-- üîí TEST 5: S√âCURIT√â RLS
-- ===========================================

SELECT '';
SELECT 'üîí TEST 5: S√âCURIT√â RLS' as test_phase;
SELECT '==========================================';

-- Politiques RLS par table
SELECT 
  'Politiques RLS' as security_check,
  tablename,
  count(*) as nb_policies,
  CASE 
    WHEN count(*) >= 2 THEN '‚úÖ Bien prot√©g√©e'
    WHEN count(*) = 1 THEN '‚ö†Ô∏è Protection partielle'
    ELSE '‚ùå Non prot√©g√©e'
  END as protection_level
FROM pg_policies 
WHERE schemaname = 'public'
  AND tablename IN ('properties', 'bookings', 'admin_users')
GROUP BY tablename
ORDER BY count(*) DESC;

-- Utilisateurs administrateurs
SELECT 
  'Administrateurs configur√©s' as security_check,
  count(*) as nb_admins,
  string_agg(DISTINCT role, ', ') as roles_available,
  CASE 
    WHEN count(*) > 0 THEN '‚úÖ Administration configur√©e'
    ELSE '‚ùå Aucun admin'
  END as admin_status
FROM admin_users;

-- ===========================================
-- üåê TEST 6: ALTERNATIVES EDGE FUNCTIONS
-- ===========================================

SELECT '';
SELECT 'üåê TEST 6: ALTERNATIVES EDGE FUNCTIONS' as test_phase;
SELECT '==========================================';

-- Matrice alternatives disponibles
SELECT 
  'Alternatives Edge Functions' as edge_function_check,
  edge_function,
  alternative,
  status
FROM (VALUES
  ('get-all-users', 'get_all_users_for_admin()', '‚úÖ Disponible'),
  ('add-admin-user', 'INSERT admin_users', '‚úÖ SQL direct'),
  ('get-users-for-admin', 'get_users_for_admin()', '‚úÖ Disponible'),
  ('dashboard-stats', 'get_dashboard_stats_real()', '‚úÖ Disponible')
) AS alternatives(edge_function, alternative, status);

-- ===========================================
-- üèÅ R√âSUM√â FINAL COMPLET
-- ===========================================

SELECT '';
SELECT 'üèÅ R√âSUM√â FINAL COMPLET' as final_phase;
SELECT '==========================================';

WITH comprehensive_audit AS (
  SELECT 
    -- Structure
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'properties') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'bookings') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'admin_users') THEN 1 ELSE 0 END as structure_score,
    -- Fonctions critiques
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_users_for_admin') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'bookings' AND column_name = 'total_amount') THEN 1 ELSE 0 END as functions_score,
    -- Donn√©es
    CASE WHEN (SELECT count(*) FROM auth.users) > 0 THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(*) FROM properties) > 0 THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(*) FROM bookings) > 0 THEN 1 ELSE 0 END as data_score,
    -- S√©curit√©
    CASE WHEN (SELECT count(*) FROM admin_users) > 0 THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(DISTINCT tablename) FROM pg_policies WHERE schemaname = 'public') >= 2 THEN 1 ELSE 0 END as security_score
)
SELECT 
  'SCORE GLOBAL SYST√àME' as final_assessment,
  structure_score || '/3 Structure' as structure_status,
  functions_score || '/3 Fonctions' as functions_status,
  data_score || '/3 Donn√©es' as data_status,
  security_score || '/2 S√©curit√©' as security_status,
  (structure_score + functions_score + data_score + security_score) || '/11 TOTAL' as total_score,
  CASE 
    WHEN (structure_score + functions_score + data_score + security_score) >= 9
    THEN 'üü¢ EXCELLENT - Syst√®me parfaitement op√©rationnel'
    WHEN (structure_score + functions_score + data_score + security_score) >= 7
    THEN 'üü° BON - Syst√®me op√©rationnel avec am√©liorations mineures'
    WHEN (structure_score + functions_score + data_score + security_score) >= 5
    THEN 'üü† MOYEN - Corrections requises avant utilisation'
    ELSE 'üî¥ CRITIQUE - Corrections majeures n√©cessaires'
  END as system_health,
  CASE 
    WHEN (structure_score + functions_score + data_score + security_score) >= 9
    THEN '‚úÖ Vous pouvez utiliser l interface admin imm√©diatement'
    WHEN (structure_score + functions_score + data_score + security_score) >= 7
    THEN '‚ö†Ô∏è Interface utilisable - quelques optimisations recommand√©es'
    WHEN (structure_score + functions_score + data_score + security_score) >= 5
    THEN 'üîß Appliquez les corrections identifi√©es puis testez √† nouveau'
    ELSE 'üö® Ex√©cutez solution-parfaite-finale.sql IMM√âDIATEMENT'
  END as action_recommendation
FROM comprehensive_audit;

-- D√©tails des probl√®mes d√©tect√©s
SELECT '';
SELECT 'üìã ACTIONS RECOMMAND√âES' as actions_section;

SELECT 
  'Si score < 9' as condition_check,
  'Ex√©cutez: scripts/solution-parfaite-finale.sql' as action_required,
  'Puis relancez: scripts/run-all-tests.sql' as verification_step;

SELECT 
  'Si interface admin ne fonctionne pas' as condition_check,
  'V√©rifiez les ‚ùå dans les tests ci-dessus' as troubleshooting,
  'Corrigez les √©l√©ments marqu√©s comme MANQUANT ou √âCHOUE' as fix_method;

-- Fin des tests
SELECT '';
SELECT '==========================================';
SELECT 'üèÅ TESTS DE COH√âRENCE TERMIN√âS';
SELECT 'Timestamp: ' || NOW()::text;
SELECT 'Analysez les r√©sultats ci-dessus pour identifier les incoh√©rences';
SELECT '==========================================';
SELECT '';
