-- ==========================================
-- TESTS DE COH√âRENCE COMPLETS
-- Morocco Host Helper Platform
-- ==========================================

-- ===========================================
-- 1. STRUCTURE DE BASE DE DONN√âES
-- ===========================================

SELECT 'üîç TEST 1: STRUCTURE DATABASE' as test_section;

-- V√©rifier les tables principales
SELECT 
  'Tables principales' as check_type,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'properties') 
    THEN '‚úÖ properties' 
    ELSE '‚ùå properties manquante' 
  END as properties_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'bookings') 
    THEN '‚úÖ bookings' 
    ELSE '‚ùå bookings manquante' 
  END as bookings_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'host_profiles') 
    THEN '‚úÖ host_profiles' 
    ELSE '‚ùå host_profiles manquante' 
  END as host_profiles_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'admin_users') 
    THEN '‚úÖ admin_users' 
    ELSE '‚ùå admin_users manquante' 
  END as admin_users_status;

-- V√©rifier les colonnes critiques
SELECT 
  'Colonnes critiques' as check_type,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'bookings' AND column_name = 'total_amount') 
    THEN '‚úÖ bookings.total_amount' 
    ELSE '‚ùå bookings.total_amount manquante' 
  END as total_amount_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'properties' AND column_name = 'user_id') 
    THEN '‚úÖ properties.user_id' 
    ELSE '‚ùå properties.user_id manquante' 
  END as user_id_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'admin_users' AND column_name = 'role') 
    THEN '‚úÖ admin_users.role' 
    ELSE '‚ùå admin_users.role manquante' 
  END as role_status;

-- ===========================================
-- 2. VUES ET FONCTIONS
-- ===========================================

SELECT 'üîç TEST 2: VUES ET FONCTIONS' as test_section;

-- V√©rifier la vue profiles
SELECT 
  'Vue profiles' as check_type,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles') 
    THEN '‚úÖ Vue profiles existe'
    ELSE '‚ùå Vue profiles manquante'
  END as profiles_view_status;

-- Tester la vue profiles
SELECT 
  'Test vue profiles' as check_type,
  count(*) as nb_profiles,
  CASE 
    WHEN count(*) > 0 
    THEN '‚úÖ Vue profiles fonctionne avec ' || count(*) || ' profils'
    ELSE '‚ùå Vue profiles vide ou non fonctionnelle'
  END as profiles_test_result
FROM public.profiles;

-- V√©rifier les fonctions
SELECT 
  'Fonctions SQL' as check_type,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_users_for_admin') 
    THEN '‚úÖ get_users_for_admin'
    ELSE '‚ùå get_users_for_admin manquante'
  END as get_users_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_dashboard_stats_real') 
    THEN '‚úÖ get_dashboard_stats_real'
    ELSE '‚ùå get_dashboard_stats_real manquante'
  END as dashboard_stats_status,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_all_users_for_admin') 
    THEN '‚úÖ get_all_users_for_admin'
    ELSE '‚ùå get_all_users_for_admin manquante'
  END as all_users_status;

-- ===========================================
-- 3. COH√âRENCE DONN√âES
-- ===========================================

SELECT 'üîç TEST 3: COH√âRENCE DONN√âES' as test_section;

-- Statistiques g√©n√©rales
SELECT 
  'Statistiques g√©n√©rales' as check_type,
  (SELECT count(*) FROM auth.users) as total_users,
  (SELECT count(*) FROM public.host_profiles) as total_profiles,
  (SELECT count(*) FROM public.properties) as total_properties,
  (SELECT count(*) FROM public.bookings) as total_bookings,
  (SELECT count(*) FROM public.admin_users) as total_admins;

-- V√©rifier les relations
SELECT 
  'Relations de donn√©es' as check_type,
  (SELECT count(*) FROM auth.users au 
   LEFT JOIN host_profiles hp ON hp.id = au.id 
   WHERE hp.id IS NULL) as users_sans_profile,
  (SELECT count(*) FROM properties p 
   WHERE p.user_id IS NOT NULL AND 
   NOT EXISTS (SELECT 1 FROM auth.users au WHERE au.id = p.user_id)) as properties_orphelines,
  (SELECT count(*) FROM bookings b 
   WHERE b.property_id IS NOT NULL AND 
   NOT EXISTS (SELECT 1 FROM properties p WHERE p.id = b.property_id)) as bookings_orphelines;

-- V√©rifier les valeurs nulles importantes
SELECT 
  'Valeurs nulles critiques' as check_type,
  (SELECT count(*) FROM bookings WHERE total_amount IS NULL) as bookings_sans_montant,
  (SELECT count(*) FROM properties WHERE user_id IS NULL) as properties_sans_proprietaire,
  (SELECT count(*) FROM admin_users WHERE role IS NULL) as admins_sans_role;

-- ===========================================
-- 4. TESTS FONCTIONNELS
-- ===========================================

SELECT 'üîç TEST 4: TESTS FONCTIONNELS' as test_section;

-- Test de la fonction get_users_for_admin
SELECT 
  'Test get_users_for_admin' as test_type,
  CASE 
    WHEN public.get_users_for_admin() IS NOT NULL 
    THEN '‚úÖ Fonction OK - ' || json_array_length(public.get_users_for_admin()) || ' utilisateurs retourn√©s'
    ELSE '‚ùå Fonction √©choue'
  END as result;

-- Test de la fonction get_dashboard_stats_real
SELECT 
  'Test get_dashboard_stats_real' as test_type,
  CASE 
    WHEN public.get_dashboard_stats_real() IS NOT NULL 
    THEN '‚úÖ Fonction OK - Stats disponibles'
    ELSE '‚ùå Fonction √©choue'
  END as result;

-- Test de la fonction get_all_users_for_admin
SELECT 
  'Test get_all_users_for_admin' as test_type,
  CASE 
    WHEN public.get_all_users_for_admin()->>'users' IS NOT NULL
    THEN '‚úÖ Fonction OK - Alternative Edge Function'
    ELSE '‚ùå Fonction √©choue'
  END as result;

-- ===========================================
-- 5. TESTS SP√âCIFIQUES ADMIN INTERFACE
-- ===========================================

SELECT 'üîç TEST 5: INTERFACE ADMIN' as test_section;

-- Simulation des requ√™tes exactes de AdminContext
SELECT 
  'AdminContext Simulation' as test_type,
  'get_users_for_admin()' as query_simulated,
  json_array_length(public.get_users_for_admin()) as nb_users_returned,
  CASE 
    WHEN json_array_length(public.get_users_for_admin()) > 0 
    THEN '‚úÖ AdminContext peut charger les utilisateurs'
    ELSE '‚ùå AdminContext ne peut pas charger les utilisateurs'
  END as admin_context_status;

-- Test des propri√©t√©s pour AdminContext
SELECT 
  'AdminContext Properties' as test_type,
  count(*) as nb_properties,
  count(CASE WHEN user_id IS NOT NULL THEN 1 END) as properties_with_owner,
  CASE 
    WHEN count(*) > 0 
    THEN '‚úÖ AdminContext peut charger les propri√©t√©s'
    ELSE '‚ùå Aucune propri√©t√© pour AdminContext'
  END as properties_status
FROM properties;

-- Test des bookings pour AdminContext
SELECT 
  'AdminContext Bookings' as test_type,
  count(b.id) as nb_bookings,
  count(p.name) as nb_with_property_name,
  sum(b.total_amount) as total_revenue,
  CASE 
    WHEN count(b.id) > 0 
    THEN '‚úÖ AdminContext peut charger les r√©servations'
    ELSE '‚ùå Aucune r√©servation pour AdminContext'
  END as bookings_status
FROM bookings b
LEFT JOIN properties p ON p.id = b.property_id;

-- ===========================================
-- 6. PERMISSIONS ET S√âCURIT√â
-- ===========================================

SELECT 'üîç TEST 6: PERMISSIONS RLS' as test_section;

-- V√©rifier les politiques RLS
SELECT 
  'Politiques RLS' as check_type,
  (SELECT count(*) FROM pg_policies WHERE tablename = 'properties') as properties_policies,
  (SELECT count(*) FROM pg_policies WHERE tablename = 'bookings') as bookings_policies,
  (SELECT count(*) FROM pg_policies WHERE tablename = 'admin_users') as admin_policies,
  CASE 
    WHEN (SELECT count(*) FROM pg_policies WHERE tablename IN ('properties', 'bookings', 'admin_users')) > 0
    THEN '‚úÖ Politiques RLS configur√©es'
    ELSE '‚ö†Ô∏è Peu ou pas de politiques RLS'
  END as rls_status;

-- ===========================================
-- 7. EDGE FUNCTIONS
-- ===========================================

SELECT 'üîç TEST 7: EDGE FUNCTIONS' as test_section;

-- Simuler les Edge Functions manquantes
SELECT 
  'Edge Functions Alternatives' as test_type,
  'get-all-users simul√©e par get_all_users_for_admin()' as get_all_users_alt,
  'add-admin-user peut √™tre remplac√©e par SQL direct' as add_admin_alt,
  '‚úÖ Alternatives fonctionnelles disponibles' as edge_functions_status;

-- ===========================================
-- 8. DONN√âES D'EXEMPLE R√âELLES
-- ===========================================

SELECT 'üîç TEST 8: DONN√âES R√âELLES' as test_section;

-- Top propri√©taires avec vraies donn√©es
SELECT 
  'Top Propri√©taires' as data_type,
  au.email,
  COALESCE(hp.full_name, 'Nom non d√©fini') as full_name,
  count(p.id) as nb_properties,
  count(b.id) as nb_bookings,
  COALESCE(sum(b.total_amount), 0) as revenue_total
FROM auth.users au
LEFT JOIN host_profiles hp ON hp.id = au.id
LEFT JOIN properties p ON p.user_id = au.id
LEFT JOIN bookings b ON b.property_id = p.id
GROUP BY au.id, au.email, hp.full_name
HAVING count(p.id) > 0
ORDER BY count(p.id) DESC, count(b.id) DESC
LIMIT 3;

-- R√©servations r√©centes
SELECT 
  'R√©servations R√©centes' as data_type,
  b.id,
  b.status,
  b.check_in_date,
  b.check_out_date,
  COALESCE(b.total_amount, 0) as total_amount,
  COALESCE(b.guest_name, 'Invit√© anonyme') as guest_name,
  COALESCE(p.name, 'Propri√©t√© sans nom') as property_name
FROM bookings b
LEFT JOIN properties p ON p.id = b.property_id
ORDER BY b.created_at DESC
LIMIT 3;

-- ===========================================
-- 9. R√âSUM√â FINAL
-- ===========================================

SELECT 'üèÅ R√âSUM√â FINAL' as test_section;

-- Score de coh√©rence
WITH coherence_checks AS (
  SELECT 
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_users_for_admin') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_dashboard_stats_real') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'bookings' AND column_name = 'total_amount') THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(*) FROM auth.users) > 0 THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(*) FROM properties) > 0 THEN 1 ELSE 0 END as score_coherence
)
SELECT 
  'Score de Coh√©rence' as metric,
  score_coherence || '/6' as score,
  CASE 
    WHEN score_coherence >= 5 THEN '‚úÖ Syst√®me tr√®s coh√©rent'
    WHEN score_coherence >= 3 THEN '‚ö†Ô∏è Syst√®me partiellement coh√©rent' 
    ELSE '‚ùå Incoh√©rences majeures d√©tect√©es'
  END as evaluation,
  CASE 
    WHEN score_coherence >= 5 THEN 'Interface admin pr√™te √† utiliser'
    WHEN score_coherence >= 3 THEN 'Corrections mineures n√©cessaires'
    ELSE 'Corrections majeures requises'
  END as recommendation
FROM coherence_checks;

-- √âtat final
SELECT 
  '√âtat du Syst√®me' as final_check,
  (SELECT count(*) FROM auth.users) as users_total,
  (SELECT count(*) FROM properties) as properties_total, 
  (SELECT count(*) FROM bookings) as bookings_total,
  (SELECT count(*) FROM admin_users) as admins_total,
  CASE 
    WHEN (SELECT count(*) FROM auth.users) > 0 AND 
         (SELECT count(*) FROM properties) > 0 AND
         EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles')
    THEN '‚úÖ SYST√àME OP√âRATIONNEL'
    ELSE '‚ùå SYST√àME N√âCESSITE DES CORRECTIONS'
  END as system_status;

SELECT '==========================================';
SELECT 'TESTS DE COH√âRENCE TERMIN√âS';
SELECT 'Examinez les r√©sultats ci-dessus pour identifier les incoh√©rences restantes';
SELECT '==========================================';
