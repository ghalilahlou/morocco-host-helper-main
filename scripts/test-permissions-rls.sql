-- ==========================================
-- TEST PERMISSIONS ET POLITIQUES RLS
-- Morocco Host Helper Platform
-- ==========================================

-- ===========================================
-- 1. AUDIT DES POLITIQUES RLS EXISTANTES
-- ===========================================

SELECT 'üîí AUDIT POLITIQUES RLS' as test_section;

-- Voir toutes les politiques RLS actuelles
SELECT 
  'Politiques RLS actuelles' as audit_type,
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- Compter les politiques par table
SELECT 
  'Nombre de politiques par table' as audit_type,
  tablename,
  count(*) as nb_policies,
  CASE 
    WHEN count(*) >= 2 THEN '‚úÖ Bien prot√©g√©e'
    WHEN count(*) = 1 THEN '‚ö†Ô∏è Protection partielle'
    ELSE '‚ùå Non prot√©g√©e'
  END as protection_level
FROM pg_policies 
WHERE schemaname = 'public'
GROUP BY tablename
ORDER BY count(*) DESC;

-- ===========================================
-- 2. V√âRIFICATION RLS ACTIV√â
-- ===========================================

SELECT 'üîí V√âRIFICATION RLS ACTIV√â' as test_section;

-- V√©rifier si RLS est activ√© sur les tables critiques
SELECT 
  '√âtat RLS par table' as check_type,
  c.relname as table_name,
  CASE 
    WHEN c.relrowsecurity THEN '‚úÖ RLS activ√©'
    ELSE '‚ùå RLS d√©sactiv√©'
  END as rls_status,
  CASE 
    WHEN c.relforcerowsecurity THEN '‚úÖ Force RLS'
    ELSE '‚ö†Ô∏è Pas de force RLS'
  END as force_rls_status
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
WHERE n.nspname = 'public' 
  AND c.relkind = 'r'
  AND c.relname IN ('properties', 'bookings', 'host_profiles', 'admin_users', 'token_allocations')
ORDER BY c.relname;

-- ===========================================
-- 3. TEST ACC√àS ADMINISTRATEUR
-- ===========================================

SELECT 'üë®‚Äçüíº TEST ACC√àS ADMINISTRATEUR' as test_section;

-- V√©rifier les utilisateurs administrateurs
SELECT 
  'Utilisateurs administrateurs' as admin_check,
  count(*) as nb_admins,
  string_agg(DISTINCT role, ', ') as roles_available,
  CASE 
    WHEN count(*) > 0 THEN '‚úÖ Des admins existent'
    ELSE '‚ùå Aucun admin configur√©'
  END as admin_status
FROM admin_users;

-- D√©tails des admins
SELECT 
  'D√©tails administrateurs' as admin_details,
  au.role,
  u.email,
  au.created_at,
  CASE 
    WHEN au.role = 'super_admin' THEN 'üî¥ Super Admin'
    WHEN au.role = 'admin' THEN 'üü° Admin'
    ELSE 'üü¢ ' || au.role
  END as role_display
FROM admin_users au
JOIN auth.users u ON u.id = au.user_id
ORDER BY 
  CASE au.role 
    WHEN 'super_admin' THEN 1 
    WHEN 'admin' THEN 2 
    ELSE 3 
  END;

-- ===========================================
-- 4. TEST POLITIQUES SP√âCIFIQUES
-- ===========================================

SELECT 'üîê TEST POLITIQUES SP√âCIFIQUES' as test_section;

-- Test politique admin_users
SELECT 
  'Politique admin_users' as policy_test,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_policies 
      WHERE tablename = 'admin_users' 
      AND schemaname = 'public'
    ) THEN '‚úÖ Politiques admin_users configur√©es'
    ELSE '‚ùå Aucune politique admin_users'
  END as admin_users_policy_status;

-- Test politique properties  
SELECT 
  'Politique properties' as policy_test,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_policies 
      WHERE tablename = 'properties' 
      AND schemaname = 'public'
    ) THEN '‚úÖ Politiques properties configur√©es'
    ELSE '‚ùå Aucune politique properties'
  END as properties_policy_status;

-- Test politique bookings
SELECT 
  'Politique bookings' as policy_test,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_policies 
      WHERE tablename = 'bookings' 
      AND schemaname = 'public'
    ) THEN '‚úÖ Politiques bookings configur√©es'
    ELSE '‚ùå Aucune politique bookings'
  END as bookings_policy_status;

-- ===========================================
-- 5. TEST FONCTIONS DE S√âCURIT√â
-- ===========================================

SELECT 'üõ°Ô∏è TEST FONCTIONS S√âCURIT√â' as test_section;

-- V√©rifier les fonctions avec SECURITY DEFINER
SELECT 
  'Fonctions SECURITY DEFINER' as security_check,
  routine_name,
  security_type,
  CASE 
    WHEN security_type = 'DEFINER' THEN '‚úÖ S√©curis√©e'
    ELSE '‚ö†Ô∏è Non s√©curis√©e'
  END as security_status
FROM information_schema.routines 
WHERE routine_schema = 'public'
  AND routine_name IN ('get_users_for_admin', 'get_dashboard_stats_real', 'get_all_users_for_admin')
ORDER BY routine_name;

-- ===========================================
-- 6. SIMULATION TEST ACC√àS
-- ===========================================

SELECT 'üß™ SIMULATION TEST ACC√àS' as test_section;

-- Simuler acc√®s normal (non-admin)
SELECT 
  'Simulation acc√®s utilisateur normal' as simulation_type,
  'Peut voir ses propres propri√©t√©s' as access_level,
  count(*) as nb_properties_visible
FROM properties 
WHERE user_id IS NOT NULL; -- Simule auth.uid() = user_id

-- Simuler acc√®s admin (via fonction)
SELECT 
  'Simulation acc√®s administrateur' as simulation_type,
  'Peut voir toutes les donn√©es via fonctions' as access_level,
  CASE 
    WHEN public.get_users_for_admin() IS NOT NULL 
    THEN 'OK - ' || json_array_length(public.get_users_for_admin()) || ' utilisateurs visibles'
    ELSE '√âCHEC - Aucune donn√©e accessible'
  END as admin_access_result;

-- ===========================================
-- 7. V√âRIFICATION POLITIQUES CRITIQUES
-- ===========================================

SELECT '‚ö†Ô∏è V√âRIFICATION POLITIQUES CRITIQUES' as test_section;

-- V√©rifier si les politiques permettent l'acc√®s admin
SELECT 
  'Politiques autorisant admin' as critical_check,
  tablename,
  policyname,
  CASE 
    WHEN qual LIKE '%admin%' OR qual LIKE '%get_user_role%' THEN '‚úÖ Inclut logique admin'
    ELSE '‚ö†Ô∏è Pas de logique admin d√©tect√©e'
  END as admin_logic_status
FROM pg_policies 
WHERE schemaname = 'public'
  AND tablename IN ('properties', 'bookings', 'admin_users')
ORDER BY tablename;

-- ===========================================
-- 8. RECOMMANDATIONS S√âCURIT√â
-- ===========================================

SELECT 'üìã RECOMMANDATIONS S√âCURIT√â' as test_section;

WITH security_audit AS (
  SELECT 
    -- RLS activ√© sur tables critiques
    (SELECT count(*) FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace 
     WHERE n.nspname = 'public' AND c.relkind = 'r' AND c.relrowsecurity 
     AND c.relname IN ('properties', 'bookings', 'admin_users')) as tables_with_rls,
    -- Politiques configur√©es
    (SELECT count(DISTINCT tablename) FROM pg_policies 
     WHERE schemaname = 'public' AND tablename IN ('properties', 'bookings', 'admin_users')) as tables_with_policies,
    -- Admins configur√©s
    (SELECT count(*) FROM admin_users) as nb_admins,
    -- Fonctions s√©curis√©es
    (SELECT count(*) FROM information_schema.routines 
     WHERE routine_schema = 'public' AND security_type = 'DEFINER'
     AND routine_name LIKE '%admin%') as secure_functions
)
SELECT 
  'Score s√©curit√©' as metric,
  (tables_with_rls + tables_with_policies + CASE WHEN nb_admins > 0 THEN 1 ELSE 0 END + secure_functions) as score_total,
  CASE 
    WHEN (tables_with_rls + tables_with_policies + CASE WHEN nb_admins > 0 THEN 1 ELSE 0 END + secure_functions) >= 6
    THEN '‚úÖ S√©curit√© excellente'
    WHEN (tables_with_rls + tables_with_policies + CASE WHEN nb_admins > 0 THEN 1 ELSE 0 END + secure_functions) >= 4
    THEN '‚ö†Ô∏è S√©curit√© correcte'
    ELSE '‚ùå S√©curit√© insuffisante'
  END as security_level,
  CASE 
    WHEN tables_with_rls < 3 THEN 'Activez RLS sur toutes les tables critiques'
    WHEN tables_with_policies < 3 THEN 'Ajoutez des politiques RLS'
    WHEN nb_admins = 0 THEN 'Cr√©ez au moins un utilisateur admin'
    ELSE 'S√©curit√© bien configur√©e'
  END as recommendation
FROM security_audit;

-- ===========================================
-- 9. R√âSUM√â PERMISSIONS
-- ===========================================

SELECT 'üèÅ R√âSUM√â PERMISSIONS' as final_section;

SELECT 
  '√âtat g√©n√©ral des permissions' as summary,
  (SELECT count(*) FROM pg_policies WHERE schemaname = 'public') as total_policies,
  (SELECT count(DISTINCT tablename) FROM pg_policies WHERE schemaname = 'public') as tables_protected,
  (SELECT count(*) FROM admin_users) as admin_users_count,
  CASE 
    WHEN (SELECT count(*) FROM pg_policies WHERE schemaname = 'public') >= 5 AND
         (SELECT count(*) FROM admin_users) > 0
    THEN '‚úÖ Permissions bien configur√©es'
    WHEN (SELECT count(*) FROM pg_policies WHERE schemaname = 'public') >= 2
    THEN '‚ö†Ô∏è Permissions partielles'
    ELSE '‚ùå Permissions insuffisantes'
  END as permissions_status;

SELECT '==========================================';
SELECT 'TESTS PERMISSIONS ET RLS TERMIN√âS';
SELECT 'V√©rifiez les ‚ùå et ‚ö†Ô∏è ci-dessus pour am√©liorer la s√©curit√©';
SELECT '==========================================';
