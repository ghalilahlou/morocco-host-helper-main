-- ==========================================
-- TESTS MAINTENANCE ET COH√âRENCE GLOBALE
-- Morocco Host Helper Platform
-- ==========================================

SELECT 'üîß TESTS MAINTENANCE ET COH√âRENCE' as section;
SELECT '=====================================' as separator;

-- ===========================================
-- 1. TESTS INT√âGRIT√â DONN√âES
-- ===========================================

SELECT 'üîí INT√âGRIT√â DONN√âES' as test_section;

-- 1.1 Contraintes r√©f√©rentielles
SELECT 
  'Contraintes r√©f√©rentielles' as integrity_test,
  table_name,
  constraint_name,
  constraint_type,
  CASE 
    WHEN constraint_type = 'FOREIGN KEY' THEN 'üîó Relation'
    WHEN constraint_type = 'PRIMARY KEY' THEN 'üîë Cl√© primaire'
    WHEN constraint_type = 'UNIQUE' THEN 'üéØ Unicit√©'
    ELSE 'üìã Autre'
  END as constraint_description
FROM information_schema.table_constraints 
WHERE table_schema = 'public' 
  AND table_name IN ('properties', 'bookings', 'host_profiles', 'admin_users', 'token_allocations')
ORDER BY table_name, constraint_type;

-- 1.2 Doublons potentiels
SELECT 
  'Doublons utilisateurs par email' as duplicate_check,
  email,
  count(*) as occurrences,
  CASE 
    WHEN count(*) = 1 THEN '‚úÖ Unique'
    ELSE '‚ùå Doublon d√©tect√©'
  END as uniqueness_status
FROM auth.users 
GROUP BY email 
HAVING count(*) > 1
UNION ALL
SELECT 
  'Tous emails uniques' as duplicate_check,
  'N/A' as email,
  0 as occurrences,
  '‚úÖ Aucun doublon email' as uniqueness_status
WHERE NOT EXISTS (
  SELECT 1 FROM auth.users 
  GROUP BY email 
  HAVING count(*) > 1
);

-- 1.3 Orphelins de donn√©es
SELECT 
  'Propri√©t√©s orphelines' as orphan_check,
  count(*) as orphan_count,
  CASE 
    WHEN count(*) = 0 THEN '‚úÖ Aucune propri√©t√© orpheline'
    ELSE '‚ö†Ô∏è ' || count(*) || ' propri√©t√©s sans propri√©taire'
  END as orphan_status
FROM properties 
WHERE user_id IS NULL OR user_id NOT IN (SELECT id FROM auth.users);

SELECT 
  'R√©servations orphelines' as orphan_check,
  count(*) as orphan_count,
  CASE 
    WHEN count(*) = 0 THEN '‚úÖ Aucune r√©servation orpheline'
    ELSE '‚ö†Ô∏è ' || count(*) || ' r√©servations sans propri√©t√©'
  END as orphan_status
FROM bookings 
WHERE property_id IS NULL OR property_id NOT IN (SELECT id FROM properties);

-- ===========================================
-- 2. TESTS PERFORMANCE SYST√àME
-- ===========================================

SELECT '‚ö° PERFORMANCE SYST√àME' as test_section;

-- 2.1 Test performance requ√™tes critiques
DO $$
DECLARE
    start_time TIMESTAMP;
    execution_time INTERVAL;
    query_name TEXT;
BEGIN
    -- Test 1: get_users_for_admin
    query_name := 'get_users_for_admin()';
    start_time := clock_timestamp();
    PERFORM public.get_users_for_admin();
    execution_time := clock_timestamp() - start_time;
    
    RAISE NOTICE '‚ö° PERFORMANCE %:', query_name;
    RAISE NOTICE '   ‚è±Ô∏è Temps: %', execution_time;
    
    IF execution_time < interval '2 seconds' THEN
        RAISE NOTICE '   ‚úÖ Performance excellente';
    ELSIF execution_time < interval '5 seconds' THEN
        RAISE NOTICE '   ‚ö†Ô∏è Performance acceptable';
    ELSE
        RAISE NOTICE '   ‚ùå Performance lente - optimisation n√©cessaire';
    END IF;
    
    -- Test 2: Jointure complexe users + properties + bookings
    query_name := 'Jointure complexe users+properties+bookings';
    start_time := clock_timestamp();
    
    PERFORM count(*)
    FROM auth.users au
    LEFT JOIN host_profiles hp ON hp.id = au.id
    LEFT JOIN properties p ON p.user_id = au.id
    LEFT JOIN bookings b ON b.property_id = p.id;
    
    execution_time := clock_timestamp() - start_time;
    
    RAISE NOTICE '‚ö° PERFORMANCE %:', query_name;
    RAISE NOTICE '   ‚è±Ô∏è Temps: %', execution_time;
    
    IF execution_time < interval '3 seconds' THEN
        RAISE NOTICE '   ‚úÖ Performance acceptable pour jointures complexes';
    ELSE
        RAISE NOTICE '   ‚ö†Ô∏è Performance lente - indexation recommand√©e';
    END IF;
END $$;

-- 2.2 Taille des tables
SELECT 
  'Taille tables principales' as size_analysis,
  schemaname,
  tablename,
  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as table_size,
  pg_total_relation_size(schemaname||'.'||tablename) as size_bytes
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename IN ('properties', 'bookings', 'host_profiles', 'admin_users', 'token_allocations')
ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;

-- ===========================================
-- 3. TESTS COH√âRENCE M√âTIER
-- ===========================================

SELECT 'üíº COH√âRENCE M√âTIER' as test_section;

-- 3.1 Coh√©rence business rules
SELECT 
  'R√©servations avec montants n√©gatifs' as business_rule,
  count(*) as violations,
  CASE 
    WHEN count(*) = 0 THEN '‚úÖ Aucun montant n√©gatif'
    ELSE '‚ùå ' || count(*) || ' montants n√©gatifs d√©tect√©s'
  END as rule_status
FROM bookings 
WHERE total_amount < 0;

SELECT 
  'R√©servations avec dates incoh√©rentes' as business_rule,
  count(*) as violations,
  CASE 
    WHEN count(*) = 0 THEN '‚úÖ Toutes les dates coh√©rentes'
    ELSE '‚ùå ' || count(*) || ' dates incoh√©rentes'
  END as rule_status
FROM bookings 
WHERE check_out_date <= check_in_date;

SELECT 
  'Propri√©t√©s sans nom' as business_rule,
  count(*) as violations,
  CASE 
    WHEN count(*) = 0 THEN '‚úÖ Toutes les propri√©t√©s nomm√©es'
    ELSE '‚ö†Ô∏è ' || count(*) || ' propri√©t√©s sans nom'
  END as rule_status
FROM properties 
WHERE name IS NULL OR trim(name) = '';

-- 3.2 Coh√©rence allocations tokens
SELECT 
  'Allocations tokens incoh√©rentes' as business_rule,
  count(*) as violations,
  CASE 
    WHEN count(*) = 0 THEN '‚úÖ Calculs tokens coh√©rents'
    ELSE '‚ùå ' || count(*) || ' calculs tokens incorrects'
  END as rule_status
FROM token_allocations 
WHERE tokens_remaining != (tokens_allocated - tokens_used)
  AND tokens_allocated IS NOT NULL 
  AND tokens_used IS NOT NULL 
  AND tokens_remaining IS NOT NULL;

-- ===========================================
-- 4. TESTS S√âCURIT√â
-- ===========================================

SELECT 'üîê TESTS S√âCURIT√â' as test_section;

-- 4.1 Politiques RLS actives
SELECT 
  'Politiques RLS par table' as security_test,
  tablename,
  count(*) as nb_policies,
  CASE 
    WHEN count(*) >= 2 THEN '‚úÖ Bien s√©curis√©e'
    WHEN count(*) = 1 THEN '‚ö†Ô∏è S√©curit√© partielle'
    ELSE '‚ùå Non s√©curis√©e'
  END as security_level
FROM pg_policies 
WHERE schemaname = 'public'
  AND tablename IN ('properties', 'bookings', 'admin_users', 'token_allocations')
GROUP BY tablename
ORDER BY count(*) DESC;

-- 4.2 Fonctions avec SECURITY DEFINER
SELECT 
  'Fonctions s√©curis√©es' as security_test,
  routine_name,
  security_type,
  CASE 
    WHEN security_type = 'DEFINER' THEN '‚úÖ S√©curis√©e'
    ELSE '‚ö†Ô∏è Non s√©curis√©e'
  END as security_status
FROM information_schema.routines 
WHERE routine_schema = 'public'
  AND routine_name LIKE '%admin%'
ORDER BY routine_name;

-- ===========================================
-- 5. TESTS MAINTENABILIT√â
-- ===========================================

SELECT 'üîß MAINTENABILIT√â' as test_section;

-- 5.1 Documentation fonctions
SELECT 
  'Documentation fonctions critiques' as maintainability_test,
  routine_name,
  CASE 
    WHEN routine_definition LIKE '%---%' OR routine_definition LIKE '%/*%*/%'
    THEN '‚úÖ Document√©e'
    ELSE '‚ö†Ô∏è Documentation recommand√©e'
  END as documentation_status
FROM information_schema.routines 
WHERE routine_schema = 'public'
  AND routine_name IN ('get_users_for_admin', 'get_all_users_for_admin', 'get_dashboard_stats_real')
ORDER BY routine_name;

-- 5.2 Conventions de nommage
SELECT 
  'Conventions nommage tables' as naming_convention,
  table_name,
  CASE 
    WHEN table_name ~ '^[a-z_]+$' THEN '‚úÖ Convention respect√©e'
    ELSE '‚ö†Ô∏è Convention non standard'
  END as naming_status
FROM information_schema.tables 
WHERE table_schema = 'public'
  AND table_name IN ('properties', 'bookings', 'host_profiles', 'admin_users', 'token_allocations')
ORDER BY table_name;

-- ===========================================
-- 6. TESTS MONITORING
-- ===========================================

SELECT 'üìä MONITORING' as test_section;

-- 6.1 M√©triques de sant√© syst√®me
WITH system_health AS (
  SELECT 
    (SELECT count(*) FROM auth.users) as total_users,
    (SELECT count(*) FROM properties) as total_properties,
    (SELECT count(*) FROM bookings) as total_bookings,
    (SELECT count(*) FROM admin_users WHERE is_active = true) as active_admins,
    (SELECT count(*) FROM token_allocations WHERE is_active = true) as active_token_allocations,
    -- Activit√© r√©cente (derni√®res 24h)
    (SELECT count(*) FROM auth.users WHERE created_at > now() - interval '24 hours') as new_users_24h,
    (SELECT count(*) FROM bookings WHERE created_at > now() - interval '24 hours') as new_bookings_24h
)
SELECT 
  'M√©triques sant√© syst√®me' as health_metrics,
  total_users || ' users (' || new_users_24h || ' nouveaux 24h)' as users_metric,
  total_properties || ' propri√©t√©s' as properties_metric,
  total_bookings || ' r√©servations (' || new_bookings_24h || ' nouvelles 24h)' as bookings_metric,
  active_admins || ' admins actifs' as admins_metric,
  active_token_allocations || ' allocations tokens actives' as tokens_metric,
  CASE 
    WHEN total_users > 0 AND total_properties > 0 AND active_admins > 0
    THEN '‚úÖ Syst√®me en bonne sant√©'
    WHEN total_users > 0 AND active_admins > 0
    THEN '‚ö†Ô∏è Syst√®me fonctionnel mais peu de donn√©es'
    ELSE '‚ùå Syst√®me n√©cessite attention'
  END as overall_health
FROM system_health;

-- ===========================================
-- 7. RECOMMANDATIONS MAINTENANCE
-- ===========================================

SELECT 'üí° RECOMMANDATIONS MAINTENANCE' as recommendations_section;

WITH maintenance_analysis AS (
  SELECT 
    -- Performance
    CASE WHEN EXISTS (SELECT 1 FROM pg_stat_user_tables WHERE n_tup_ins + n_tup_upd + n_tup_del > 1000) THEN 1 ELSE 0 END as needs_vacuum,
    -- S√©curit√©
    (SELECT count(*) FROM pg_policies WHERE schemaname = 'public') as total_policies,
    -- Donn√©es
    (SELECT count(*) FROM bookings WHERE total_amount IS NULL) as bookings_without_amount,
    -- Fonctions
    (SELECT count(*) FROM information_schema.routines WHERE routine_schema = 'public' AND routine_name LIKE '%admin%') as admin_functions
)
SELECT 
  'Recommandations maintenance' as recommendation_type,
  CASE 
    WHEN needs_vacuum = 1 
    THEN 'üîß VACUUM et ANALYZE recommand√©s pour optimiser les performances'
    ELSE '‚úÖ Maintenance base OK'
  END as performance_recommendation,
  CASE 
    WHEN total_policies < 5 
    THEN 'üîê Renforcer les politiques RLS pour la s√©curit√©'
    ELSE '‚úÖ S√©curit√© RLS correcte'
  END as security_recommendation,
  CASE 
    WHEN bookings_without_amount > 0 
    THEN 'üí∞ Mettre √† jour les montants manquants: ' || bookings_without_amount || ' r√©servations'
    ELSE '‚úÖ Donn√©es financi√®res compl√®tes'
  END as data_recommendation,
  CASE 
    WHEN admin_functions >= 3 
    THEN '‚úÖ Fonctions admin compl√®tes'
    ELSE 'üîß Compl√©ter les fonctions admin manquantes'
  END as functions_recommendation
FROM maintenance_analysis;

-- ===========================================
-- 8. SCORE GLOBAL SYST√àME
-- ===========================================

SELECT 'üèÅ SCORE GLOBAL SYST√àME' as final_section;

WITH system_score AS (
  SELECT 
    -- Donn√©es (25%)
    CASE 
      WHEN (SELECT count(*) FROM auth.users) > 0 AND 
           (SELECT count(*) FROM properties) > 0 AND 
           (SELECT count(*) FROM bookings) > 0 
      THEN 25 ELSE 0 
    END as data_score,
    -- Fonctionnalit√©s (25%)
    CASE 
      WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_users_for_admin') AND
           EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles') AND
           EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'bookings' AND column_name = 'total_amount')
      THEN 25 ELSE 0 
    END as functionality_score,
    -- S√©curit√© (25%)
    CASE 
      WHEN (SELECT count(*) FROM admin_users WHERE is_active = true) > 0 AND
           (SELECT count(*) FROM pg_policies WHERE schemaname = 'public') >= 3
      THEN 25 ELSE 0 
    END as security_score,
    -- Performance/Maintenance (25%)
    CASE 
      WHEN (SELECT count(*) FROM bookings WHERE total_amount IS NULL) = 0 AND
           (SELECT count(*) FROM properties WHERE user_id IS NULL) = 0
      THEN 25 ELSE 15 
    END as maintenance_score
)
SELECT 
  'SCORE GLOBAL SYST√àME' as final_assessment,
  (data_score + functionality_score + security_score + maintenance_score) || '/100' as total_score,
  data_score || '/25 Donn√©es' as data_component,
  functionality_score || '/25 Fonctionnalit√©s' as functionality_component,
  security_score || '/25 S√©curit√©' as security_component,
  maintenance_score || '/25 Maintenance' as maintenance_component,
  CASE 
    WHEN (data_score + functionality_score + security_score + maintenance_score) >= 90
    THEN 'üåü EXCELLENT - Syst√®me production-ready'
    WHEN (data_score + functionality_score + security_score + maintenance_score) >= 75
    THEN '‚úÖ BON - Syst√®me op√©rationnel'
    WHEN (data_score + functionality_score + security_score + maintenance_score) >= 60
    THEN '‚ö†Ô∏è CORRECT - Am√©liorations recommand√©es'
    WHEN (data_score + functionality_score + security_score + maintenance_score) >= 40
    THEN 'üîß M√âDIOCRE - Corrections n√©cessaires'
    ELSE 'üö® CRITIQUE - Intervention urgente requise'
  END as system_grade,
  CASE 
    WHEN (data_score + functionality_score + security_score + maintenance_score) >= 75
    THEN 'Syst√®me pr√™t pour utilisation en production'
    WHEN (data_score + functionality_score + security_score + maintenance_score) >= 60
    THEN 'Syst√®me utilisable avec surveillance'
    ELSE 'Appliquer les corrections avant utilisation'
  END as final_recommendation
FROM system_score;

SELECT '=====================================' as separator;
SELECT 'TESTS MAINTENANCE ET COH√âRENCE TERMIN√âS' as completion;
