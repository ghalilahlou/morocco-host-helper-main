#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const SUPABASE_URL = "https://csopyblkfyofwkeqqegd.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNzb3B5YmxrZnlvZndrZXFxZWdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTkwNTQsImV4cCI6MjA2OTU3NTA1NH0.QcIqFLgD6Cg5hYu5Q4iQjvuckTVJyKo6wDd9AMEeakM";

console.log('üîç V√©rification de la Structure de Base de Donn√©es - Morocco Host Helper');
console.log('======================================================================');
console.log(`üì° URL: ${SUPABASE_URL}`);
console.log(`üîë Project ID: csopyblkfyofwkeqqegd`);
console.log('');

// Cr√©er le client Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// Structure attendue bas√©e sur votre sch√©ma
const expectedTables = [
  'airbnb_reservations',
  'airbnb_sync_status',
  'bookings',
  'contract_signatures',
  'guest_submissions',
  'guest_verification_tokens',
  'guests',
  'host_profiles',
  'properties',
  'property_verification_tokens',
  'system_logs',
  'uploaded_documents'
];

async function verifyDatabaseStructure() {
  try {
    console.log('üìä V√©rification des tables attendues...');
    console.log('');
    
    const tableStatus = {};
    
    for (const table of expectedTables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå Table ${table}: ${error.message}`);
          tableStatus[table] = 'missing';
        } else {
          console.log(`‚úÖ Table ${table}: Accessible`);
          tableStatus[table] = 'exists';
        }
      } catch (err) {
        console.log(`‚ùå Table ${table}: ${err.message}`);
        tableStatus[table] = 'error';
      }
    }
    
    console.log('\nüìã R√©sum√© de la structure:');
    console.log('==========================');
    
    const existingTables = Object.entries(tableStatus).filter(([_, status]) => status === 'exists');
    const missingTables = Object.entries(tableStatus).filter(([_, status]) => status === 'missing');
    const errorTables = Object.entries(tableStatus).filter(([_, status]) => status === 'error');
    
    console.log(`‚úÖ Tables existantes: ${existingTables.length}/${expectedTables.length}`);
    console.log(`‚ùå Tables manquantes: ${missingTables.length}`);
    console.log(`‚ö†Ô∏è  Tables avec erreur: ${errorTables.length}`);
    
    if (missingTables.length > 0) {
      console.log('\nüîß Tables manquantes:');
      missingTables.forEach(([table, _]) => {
        console.log(`   - ${table}`);
      });
    }
    
    if (errorTables.length > 0) {
      console.log('\n‚ö†Ô∏è  Tables avec erreur:');
      errorTables.forEach(([table, _]) => {
        console.log(`   - ${table}`);
      });
    }
    
    // V√©rifier les contraintes et relations
    console.log('\nüîó V√©rification des relations...');
    await verifyRelations();
    
    // V√©rifier les types personnalis√©s
    console.log('\nüè∑Ô∏è  V√©rification des types personnalis√©s...');
    await verifyCustomTypes();
    
    console.log('\nüéâ V√©rification termin√©e !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  }
}

async function verifyRelations() {
  try {
    // V√©rifier quelques relations cl√©s
    const relations = [
      { table: 'bookings', relation: 'properties' },
      { table: 'guests', relation: 'bookings' },
      { table: 'property_verification_tokens', relation: 'properties' },
      { table: 'guest_submissions', relation: 'property_verification_tokens' }
    ];
    
    for (const rel of relations) {
      try {
        const { data, error } = await supabase
          .from(rel.table)
          .select(`*, ${rel.relation}(*)`)
          .limit(1);
        
        if (error) {
          console.log(`   ‚ö†Ô∏è  Relation ${rel.table} -> ${rel.relation}: ${error.message}`);
        } else {
          console.log(`   ‚úÖ Relation ${rel.table} -> ${rel.relation}: OK`);
        }
      } catch (err) {
        console.log(`   ‚ùå Relation ${rel.table} -> ${rel.relation}: ${err.message}`);
      }
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur lors de la v√©rification des relations: ${error.message}`);
  }
}

async function verifyCustomTypes() {
  try {
    // V√©rifier les types personnalis√©s comme booking_status
    const { data, error } = await supabase
      .from('bookings')
      .select('status')
      .limit(1);
    
    if (error) {
      console.log(`   ‚ö†Ô∏è  Type booking_status: ${error.message}`);
    } else {
      console.log(`   ‚úÖ Type booking_status: OK`);
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur lors de la v√©rification des types: ${error.message}`);
  }
}

// Ex√©cuter la v√©rification
verifyDatabaseStructure();
