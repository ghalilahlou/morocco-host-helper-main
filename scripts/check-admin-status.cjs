#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://csopyblkfyofwkeqqegd.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNzb3B5YmxrZnlvZndrZXFxZWdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5OTkwNTQsImV4cCI6MjA2OTU3NTA1NH0.QcIqFLgD6Cg5hYu5Q4iJvuckTVJyKo6wDd3AMEeakM';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkAdminStatus() {
  console.log('üîç V√©rification du statut administrateur...');
  console.log('üìß Email √† v√©rifier: ghalilahlou26@gmail.com');

  try {
    // 1. V√©rifier si l'utilisateur existe dans auth.users
    console.log('\n1Ô∏è‚É£ V√©rification de l\'existence de l\'utilisateur...');
    
    const { data: user, error: userError } = await supabase
      .from('auth.users')
      .select('id, email, created_at')
      .eq('email', 'ghalilahlou26@gmail.com')
      .single();

    if (userError) {
      console.error('‚ùå Erreur lors de la recherche de l\'utilisateur:', userError);
      return;
    }

    if (!user) {
      console.error('‚ùå Utilisateur ghalilahlou26@gmail.com non trouv√© dans auth.users');
      return;
    }

    console.log('‚úÖ Utilisateur trouv√©:');
    console.log('   - ID:', user.id);
    console.log('   - Email:', user.email);
    console.log('   - Cr√©√© le:', user.created_at);

    // 2. V√©rifier si l'utilisateur est dans admin_users
    console.log('\n2Ô∏è‚É£ V√©rification du statut administrateur...');
    
    const { data: adminUser, error: adminError } = await supabase
      .from('admin_users')
      .select('*')
      .eq('user_id', user.id)
      .single();

    if (adminError && adminError.code !== 'PGRST116') {
      console.error('‚ùå Erreur lors de la v√©rification admin:', adminError);
      return;
    }

    if (!adminUser) {
      console.log('‚ùå L\'utilisateur n\'est PAS administrateur');
      console.log('üí° Il faut l\'ajouter comme administrateur');
      return;
    }

    console.log('‚úÖ L\'utilisateur EST administrateur:');
    console.log('   - R√¥le:', adminUser.role);
    console.log('   - Actif:', adminUser.is_active);
    console.log('   - Cr√©√© le:', adminUser.created_at);

    // 3. V√©rifier les tokens allou√©s
    console.log('\n3Ô∏è‚É£ V√©rification des tokens allou√©s...');
    
    const { data: tokens, error: tokensError } = await supabase
      .from('token_allocations')
      .select('*')
      .eq('user_id', user.id)
      .single();

    if (tokensError && tokensError.code !== 'PGRST116') {
      console.error('‚ùå Erreur lors de la v√©rification des tokens:', tokensError);
      return;
    }

    if (!tokens) {
      console.log('‚ö†Ô∏è Aucun token allou√© √† cet utilisateur');
    } else {
      console.log('‚úÖ Tokens allou√©s:');
      console.log('   - Tokens allou√©s:', tokens.tokens_allocated);
      console.log('   - Tokens utilis√©s:', tokens.tokens_used);
      console.log('   - Tokens restants:', tokens.tokens_remaining);
      console.log('   - Actif:', tokens.is_active);
    }

    // 4. R√©sum√© final
    console.log('\nüìã R√âSUM√â:');
    if (adminUser) {
      console.log('‚úÖ L\'utilisateur ghalilahlou26@gmail.com est administrateur');
      console.log('üîó Il peut acc√©der √† l\'interface administrateur via le menu profil');
      if (tokens) {
        console.log('üé´ Il a des tokens allou√©s pour g√©n√©rer des liens');
      }
    } else {
      console.log('‚ùå L\'utilisateur ghalilahlou26@gmail.com n\'est PAS administrateur');
      console.log('üí° Il faut l\'ajouter comme administrateur');
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

checkAdminStatus();
