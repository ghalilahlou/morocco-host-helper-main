-- ==========================================
-- DIAGNOSTIC RAPIDE - D√âTECTION INCOH√âRENCES
-- Morocco Host Helper Platform  
-- ==========================================

-- Test ultra-rapide pour identifier imm√©diatement les probl√®mes

-- ===========================================
-- üö® TESTS CRITIQUES (MUST HAVE)
-- ===========================================

SELECT 'üö® TESTS CRITIQUES' as section;

-- 1. Vue profiles (CRITIQUE pour AdminContext ligne 79)
SELECT 
  '1. Vue profiles' as test,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles') 
    THEN '‚úÖ OK'
    ELSE '‚ùå MANQUANTE - AdminContext va √âCHOUER'
  END as status;

-- 2. Fonction get_users_for_admin (CRITIQUE pour AdminContext ligne 79)  
SELECT 
  '2. Fonction get_users_for_admin' as test,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_users_for_admin') 
    THEN '‚úÖ OK'
    ELSE '‚ùå MANQUANTE - AdminContext va √âCHOUER'
  END as status;

-- 3. Colonne total_amount (CRITIQUE pour calcul revenue ligne 92)
SELECT 
  '3. Colonne bookings.total_amount' as test,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'bookings' AND column_name = 'total_amount') 
    THEN '‚úÖ OK'
    ELSE '‚ùå MANQUANTE - Calcul revenue va √âCHOUER'
  END as status;

-- ===========================================
-- ‚ö†Ô∏è TESTS IMPORTANTS (SHOULD HAVE)
-- ===========================================

SELECT '‚ö†Ô∏è TESTS IMPORTANTS' as section;

-- 4. Donn√©es utilisateurs
SELECT 
  '4. Utilisateurs dans auth.users' as test,
  CASE 
    WHEN (SELECT count(*) FROM auth.users) > 0 
    THEN '‚úÖ OK - ' || (SELECT count(*) FROM auth.users) || ' utilisateurs'
    ELSE '‚ùå VIDE - Interface sera vide'
  END as status;

-- 5. Donn√©es propri√©t√©s  
SELECT 
  '5. Propri√©t√©s dans properties' as test,
  CASE 
    WHEN (SELECT count(*) FROM properties) > 0 
    THEN '‚úÖ OK - ' || (SELECT count(*) FROM properties) || ' propri√©t√©s'
    ELSE '‚ùå VIDE - Interface sera vide'
  END as status;

-- 6. Relation properties.user_id
SELECT 
  '6. Propri√©t√©s avec propri√©taires' as test,
  CASE 
    WHEN (SELECT count(*) FROM properties WHERE user_id IS NOT NULL) > 0 
    THEN '‚úÖ OK - ' || (SELECT count(*) FROM properties WHERE user_id IS NOT NULL) || ' propri√©t√©s assign√©es'
    ELSE '‚ùå AUCUNE - AdminUsers sera dysfonctionnel'
  END as status;

-- ===========================================
-- üìä TESTS FONCTIONNELS 
-- ===========================================

SELECT 'üìä TESTS FONCTIONNELS' as section;

-- 7. Test fonction get_users_for_admin
SELECT 
  '7. Test get_users_for_admin()' as test,
  CASE 
    WHEN public.get_users_for_admin() IS NOT NULL 
    THEN '‚úÖ OK - Retourne ' || json_array_length(public.get_users_for_admin()) || ' utilisateurs'
    ELSE '‚ùå √âCHOUE'
  END as status;

-- 8. Test relation bookings -> properties
SELECT 
  '8. Relation bookings -> properties' as test,
  CASE 
    WHEN (SELECT count(*) FROM bookings b JOIN properties p ON p.id = b.property_id) > 0
    THEN '‚úÖ OK - ' || (SELECT count(*) FROM bookings b JOIN properties p ON p.id = b.property_id) || ' liens valides'
    WHEN (SELECT count(*) FROM bookings) = 0
    THEN '‚ö†Ô∏è Aucune r√©servation'
    ELSE '‚ùå Liens cass√©s'
  END as status;

-- ===========================================
-- üèÅ DIAGNOSTIC FINAL
-- ===========================================

SELECT 'üèÅ DIAGNOSTIC FINAL' as section;

WITH diagnostic AS (
  SELECT 
    -- Tests critiques
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'profiles') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_users_for_admin') THEN 1 ELSE 0 END +
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'bookings' AND column_name = 'total_amount') THEN 1 ELSE 0 END as critiques_ok,
    -- Tests importants  
    CASE WHEN (SELECT count(*) FROM auth.users) > 0 THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(*) FROM properties) > 0 THEN 1 ELSE 0 END +
    CASE WHEN (SELECT count(*) FROM properties WHERE user_id IS NOT NULL) > 0 THEN 1 ELSE 0 END as importants_ok
)
SELECT 
  '√âtat du syst√®me' as diagnostic,
  critiques_ok || '/3 critiques OK' as score_critique,
  importants_ok || '/3 importants OK' as score_important,
  CASE 
    WHEN critiques_ok = 3 AND importants_ok >= 2 
    THEN '‚úÖ SYST√àME OP√âRATIONNEL'
    WHEN critiques_ok = 3 AND importants_ok >= 1
    THEN '‚ö†Ô∏è SYST√àME FONCTIONNEL (donn√©es limit√©es)'
    WHEN critiques_ok >= 2
    THEN '‚ùå CORRECTIONS REQUISES'
    ELSE 'üö® CORRECTIONS CRITIQUES REQUISES'
  END as status_global,
  CASE 
    WHEN critiques_ok = 3 AND importants_ok >= 2 
    THEN 'Interface admin pr√™te √† utiliser'
    WHEN critiques_ok = 3 AND importants_ok >= 1
    THEN 'Interface admin utilisable mais avec peu de donn√©es'
    WHEN critiques_ok >= 2
    THEN 'Ex√©cutez solution-parfaite-finale.sql'
    ELSE 'Ex√©cutez solution-parfaite-finale.sql IMM√âDIATEMENT'
  END as action_recommandee
FROM diagnostic;

-- ===========================================
-- üîß SOLUTION RAPIDE SI PROBL√àMES
-- ===========================================

SELECT 'üîß SOLUTION RAPIDE' as section;

SELECT 
  'Si des ‚ùå ci-dessus' as probleme,
  'Ex√©cutez: scripts/solution-parfaite-finale.sql' as solution,
  'Puis relancez ce diagnostic' as verification;
