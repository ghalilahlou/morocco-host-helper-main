#!/usr/bin/env node

/**
 * Script de test pour la fonctionnalit√© administrateur
 * V√©rifie que toutes les tables et composants sont en place
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('VITE_SUPABASE_URL:', !!supabaseUrl);
  console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testAdminFunctionality() {
  console.log('üîç Test de la fonctionnalit√© administrateur...\n');

  try {
    // 1. V√©rifier les tables admin
    console.log('1. V√©rification des tables administrateur...');
    
    const tables = ['admin_users', 'token_allocations', 'admin_activity_logs', 'admin_statistics'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`   ‚ùå Table ${table}: ${error.message}`);
        } else {
          console.log(`   ‚úÖ Table ${table}: OK`);
        }
      } catch (err) {
        console.log(`   ‚ùå Table ${table}: ${err.message}`);
      }
    }

    // 2. V√©rifier les utilisateurs admin
    console.log('\n2. V√©rification des utilisateurs administrateur...');
    
    const { data: adminUsers, error: adminError } = await supabase
      .from('admin_users')
      .select('*');
    
    if (adminError) {
      console.log(`   ‚ùå Erreur lors de la r√©cup√©ration des admins: ${adminError.message}`);
    } else {
      console.log(`   ‚úÖ ${adminUsers.length} utilisateur(s) administrateur trouv√©(s)`);
      
      for (const admin of adminUsers) {
        console.log(`      - ${admin.user_id} (${admin.role})`);
      }
    }

    // 3. V√©rifier les allocations de tokens
    console.log('\n3. V√©rification des allocations de tokens...');
    
    const { data: tokenAllocations, error: tokenError } = await supabase
      .from('token_allocations')
      .select('*');
    
    if (tokenError) {
      console.log(`   ‚ùå Erreur lors de la r√©cup√©ration des tokens: ${tokenError.message}`);
    } else {
      console.log(`   ‚úÖ ${tokenAllocations.length} allocation(s) de tokens trouv√©e(s)`);
      
      const totalTokens = tokenAllocations.reduce((sum, allocation) => sum + allocation.tokens_remaining, 0);
      console.log(`      - Total tokens actifs: ${totalTokens}`);
    }

    // 4. V√©rifier les utilisateurs auth
    console.log('\n4. V√©rification des utilisateurs auth...');
    
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.log(`   ‚ùå Erreur lors de la r√©cup√©ration des utilisateurs auth: ${authError.message}`);
    } else {
      console.log(`   ‚úÖ ${authUsers.users.length} utilisateur(s) auth trouv√©(s)`);
      
      // V√©rifier les emails sp√©cifiques
      const targetEmails = ['ghalilahlou26@gmail.com', 'L.benmouaz@gmail.com', 'Hicham.boumnade@nexa-p.com'];
      
      for (const email of targetEmails) {
        const user = authUsers.users.find(u => u.email === email);
        if (user) {
          console.log(`      ‚úÖ ${email}: Utilisateur trouv√© (${user.id})`);
          
          // V√©rifier si admin
          const adminUser = adminUsers?.find(admin => admin.user_id === user.id);
          if (adminUser) {
            console.log(`         - R√¥le: ${adminUser.role}`);
            console.log(`         - Actif: ${adminUser.is_active}`);
          } else {
            console.log(`         - ‚ö†Ô∏è  Pas d'admin_users trouv√©`);
          }
        } else {
          console.log(`      ‚ùå ${email}: Utilisateur non trouv√©`);
        }
      }
    }

    // 5. Test des requ√™tes de statistiques
    console.log('\n5. Test des requ√™tes de statistiques...');
    
    try {
      const [
        { count: totalUsers },
        { count: totalProperties },
        { count: totalBookings }
      ] = await Promise.all([
        supabase.from('auth.users').select('*', { count: 'exact', head: true }),
        supabase.from('properties').select('*', { count: 'exact', head: true }),
        supabase.from('bookings').select('*', { count: 'exact', head: true })
      ]);
      
      console.log(`   ‚úÖ Statistiques r√©cup√©r√©es:`);
      console.log(`      - Utilisateurs: ${totalUsers || 0}`);
      console.log(`      - Propri√©t√©s: ${totalProperties || 0}`);
      console.log(`      - R√©servations: ${totalBookings || 0}`);
    } catch (error) {
      console.log(`   ‚ùå Erreur lors de la r√©cup√©ration des statistiques: ${error.message}`);
    }

    // 6. Test des politiques RLS
    console.log('\n6. V√©rification des politiques RLS...');
    
    const { data: policies, error: policiesError } = await supabase
      .rpc('get_policies_info');
    
    if (policiesError) {
      console.log(`   ‚ö†Ô∏è  Impossible de r√©cup√©rer les politiques RLS: ${policiesError.message}`);
    } else {
      console.log(`   ‚úÖ Politiques RLS r√©cup√©r√©es`);
    }

    console.log('\n‚úÖ Test de la fonctionnalit√© administrateur termin√© !');
    
    // R√©sum√©
    console.log('\nüìä R√©sum√©:');
    console.log(`   - Tables admin: ${tables.length} v√©rifi√©es`);
    console.log(`   - Utilisateurs admin: ${adminUsers?.length || 0}`);
    console.log(`   - Allocations de tokens: ${tokenAllocations?.length || 0}`);
    console.log(`   - Utilisateurs auth: ${authUsers?.users.length || 0}`);

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    process.exit(1);
  }
}

// Fonction pour cr√©er une fonction RPC pour r√©cup√©rer les politiques
async function createPoliciesInfoFunction() {
  console.log('\nüîß Cr√©ation de la fonction RPC pour les politiques...');
  
  const sql = `
    CREATE OR REPLACE FUNCTION get_policies_info()
    RETURNS TABLE (
      table_name text,
      policy_name text,
      roles text[],
      cmd text,
      permissive boolean
    ) AS $$
    BEGIN
      RETURN QUERY
      SELECT 
        p.tablename::text,
        p.policyname::text,
        p.roles,
        p.cmd::text,
        p.permissive
      FROM pg_policies p
      WHERE p.schemaname = 'public'
      ORDER BY p.tablename, p.policyname;
    END;
    $$ LANGUAGE plpgsql SECURITY DEFINER;
  `;
  
  try {
    const { error } = await supabase.rpc('exec_sql', { sql });
    if (error) {
      console.log(`   ‚ö†Ô∏è  Impossible de cr√©er la fonction: ${error.message}`);
    } else {
      console.log('   ‚úÖ Fonction RPC cr√©√©e');
    }
  } catch (err) {
    console.log(`   ‚ö†Ô∏è  Erreur lors de la cr√©ation de la fonction: ${err.message}`);
  }
}

// Ex√©cution
async function main() {
  await createPoliciesInfoFunction();
  await testAdminFunctionality();
}

main().catch(console.error);
