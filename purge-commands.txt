ðŸ”’ COMMANDES DE PURGE GIT - Ã€ EXÃ‰CUTER MANUELLEMENT

=== Ã‰TAPE 1: SAUVEGARDE ===
# CrÃ©er une sauvegarde
Copy-Item -Path "." -Destination "../backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')" -Recurse -Force

=== Ã‰TAPE 2: SUPPRESSION DES FICHIERS .ENV LOCAUX ===
# Supprimer tous les fichiers .env du rÃ©pertoire de travail
Remove-Item "*.env*" -Force -ErrorAction SilentlyContinue
Remove-Item ".env" -Force -ErrorAction SilentlyContinue
Remove-Item ".env.local" -Force -ErrorAction SilentlyContinue

=== Ã‰TAPE 3: SUPPRESSION DE L'INDEX GIT ===
# Supprimer les fichiers .env de l'index Git
git rm --cached --ignore-unmatch "*.env*"
git rm --cached --ignore-unmatch ".env"
git rm --cached --ignore-unmatch ".env.local"
git rm --cached --ignore-unmatch ".env.development"
git rm --cached --ignore-unmatch ".env.production"

=== Ã‰TAPE 4: NETTOYAGE DE L'HISTORIQUE ===
# Supprimer les fichiers .env de tout l'historique
git filter-branch --force --index-filter "git rm --cached --ignore-unmatch *.env* .env .env.local .env.development .env.production" --prune-empty --tag-name-filter cat -- --all

=== Ã‰TAPE 5: NETTOYAGE DES RÃ‰FÃ‰RENCES ===
# Supprimer les rÃ©fÃ©rences originales
git for-each-ref --format="%(refname)" refs/original | ForEach-Object { git update-ref -d $_ }

=== Ã‰TAPE 6: GARBAGE COLLECTOR ===
# Nettoyer le garbage collector
git reflog expire --expire=now --all
git gc --prune=now --aggressive

=== Ã‰TAPE 7: COMMIT ET PUSH ===
# Commiter les changements
git add .
git commit -m "ðŸ”’ SECURITY: Purge complete des secrets de l'historique Git"

# Pousser avec force (ATTENTION!)
git push --force origin main

=== VÃ‰RIFICATION ===
# VÃ©rifier qu'aucun fichier .env n'est dans l'historique
git log --oneline --name-only | findstr "\.env"

# Si aucun rÃ©sultat, la purge a rÃ©ussi!
